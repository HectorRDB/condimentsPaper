kras <- condimentsPaper::import_KRAS()
use_data(kras)
kras
.get_raw_data <- function(genes) {
raw <- GEOquery::getGEOSuppFiles("GSE137912", baseDir = tempdir(),
filter_regex = "RAW")
raw_loc <- rownames(raw)
folder <- stringr::str_remove(raw_loc, "GSE137912_RAW.tar")
system(paste0("tar -xvf ", raw_loc, " -C ", folder))
samples <- list.files(folder, full.names = TRUE) %>%
stringr::str_subset(pattern = "barcodes") %>%
stringr::str_remove("barcodes.tsv.gz")
counts_1 <- DropletUtils::read10xCounts(samples[1:4], type = "prefix",
compressed = TRUE)
keep <- rowData(counts_1)$Symbol %in% genes
counts_1 <- counts_1[keep, ]
counts_2 <- DropletUtils::read10xCounts(samples[5:12], type = "prefix",
compressed = TRUE)
keep <- rowData(counts_2)$Symbol %in% genes
counts_2 <- counts_2[keep, ]
keep <- rownames(counts_1) %in% rownames(counts_2)
counts_1 <- counts_1[keep, ]
keep <- rownames(counts_2) %in% rownames(counts_1)
counts_2 <- counts_2[keep, ]
counts_2 <- counts_2[rownames(counts_1), ]
colnames(counts_1) <- paste0(counts_1$Sample, counts_1$Barcode)
colnames(counts_2) <- paste0(counts_2$Sample, counts_2$Barcode)
counts <- cbind(counts_1, counts_2)
file.remove(raw_loc)
return(counts(counts))
}
.convert <- function(logcounts) {
samples <- data.frame(full = colnames(logcounts)) %>%
dplyr::mutate(root = stringr::word(full, 1, sep = "_"),
int = stringr::word(full, 2, sep = "_"),
last = stringr::word(full, 3, sep = "_"))
roots <- samples %>%
dplyr::select(root, int) %>%
dplyr::distinct() %>%
dplyr::group_by(root) %>%
dplyr::mutate(new_int = rank(int))
samples_log <- dplyr::full_join(samples, roots) %>%
dplyr::mutate(new = paste(root, new_int, last, sep = "_")) %>%
dplyr::select(full, new)
return(samples_log)
}
.clean_counts <- function(counts) {
colnames(counts) <- colnames(counts) %>%
stringr::word(2, sep = "_") %>%
stringr::str_replace_all("\\.", "_") %>%
stringr::str_remove("-1$")
counts <- counts[, !stringr::str_detect(colnames(counts), "H2122_24")]
samples <- data.frame(full = colnames(counts)) %>%
dplyr::mutate(root = stringr::word(full, 1, sep = "_"),
int = as.numeric(stringr::word(full, 2, sep = "_")),
last = stringr::word(full, 3, sep = "_"))
roots <- samples %>%
dplyr::select(root, int) %>%
dplyr::distinct() %>%
dplyr::group_by(root) %>%
dplyr::mutate(new_int = rank(int))
samples_counts <- full_join(samples, roots) %>%
mutate(new = paste(root, new_int, last, sep = "_"))
counts <- counts[, samples_counts$full]
colnames(counts) <- samples_counts$new
return(counts)
}
# Get count and logcount matrices ----
raw <- GEOquery::getGEOSuppFiles("GSE137912", baseDir = tempdir(),
filter_regex = "logcounts")
raw_loc <- rownames(raw)
logcounts <- readr::read_csv(raw_loc)
genes <- logcounts$X1
logcounts <- logcounts[, -1]
logcounts <- Matrix::Matrix(as.matrix(logcounts))
file.remove(raw_loc)
conversion <- .convert(logcounts)
counts <- .get_raw_data(genes = genes)
logcounts <- logcounts[genes %in% rownames(counts), ]
counts <- .clean_counts(counts)
counts <- counts[, conversion$new]
colnames(counts) <- conversion$full
counts <- counts[rownames(counts) %in% genes, ]
# Get cell metadata ----
url <- paste0("https://static-content.springer.com/esm/art%3A10.1038%2Fs41586",
"-019-1884-x/MediaObjects/41586_2019_1884_MOESM4_ESM.csv")
celltype <- readr::read_csv(url(url))
url <- paste0("https://static-content.springer.com/esm/art%3A10.1038%2Fs41586",
"-019-1884-x/MediaObjects/41586_2019_1884_MOESM6_ESM.csv")
pst <- readr::read_csv(url(url))
colD <- full_join(celltype, pst, by = "X1")
url <- paste0("https://static-content.springer.com/esm/art%3A10.1038%2Fs41586",
"-019-1884-x/MediaObjects/41586_2019_1884_MOESM13_ESM.xlsx")
df <- openxlsx::read.xlsx(url, sheet = "Extended Data Fig. 2g, i")
df <- df[, 1:7]
colD <- full_join(colD, df)
rownames(colD) <- colD$X1
# Get gene metadata ----
url <- paste0("https://static-content.springer.com/esm/art%3A10.1038%2Fs41586",
"-019-1884-x/MediaObjects/41586_2019_1884_MOESM5_ESM.csv")
genemeta <- readr::read_csv(url(url)) %>%
dplyr::select(-X1, -X22, -Description, -`Gene-level column names`)
rownames(genemeta) <- genemeta$gene_short_name
.get_raw_data <- function(genes) {
raw <- GEOquery::getGEOSuppFiles("GSE137912", baseDir = tempdir(),
filter_regex = "RAW")
raw_loc <- rownames(raw)
folder <- stringr::str_remove(raw_loc, "GSE137912_RAW.tar")
system(paste0("tar -xvf ", raw_loc, " -C ", folder))
samples <- list.files(folder, full.names = TRUE) %>%
stringr::str_subset(pattern = "barcodes") %>%
stringr::str_remove("barcodes.tsv.gz")
counts_1 <- DropletUtils::read10xCounts(samples[1:4], type = "prefix",
compressed = TRUE)
keep <- rowData(counts_1)$Symbol %in% genes
counts_1 <- counts_1[keep, ]
counts_2 <- DropletUtils::read10xCounts(samples[5:12], type = "prefix",
compressed = TRUE)
keep <- rowData(counts_2)$Symbol %in% genes
counts_2 <- counts_2[keep, ]
keep <- rownames(counts_1) %in% rownames(counts_2)
counts_1 <- counts_1[keep, ]
keep <- rownames(counts_2) %in% rownames(counts_1)
counts_2 <- counts_2[keep, ]
counts_2 <- counts_2[rownames(counts_1), ]
colnames(counts_1) <- paste0(counts_1$Sample, counts_1$Barcode)
colnames(counts_2) <- paste0(counts_2$Sample, counts_2$Barcode)
counts <- cbind(counts_1, counts_2)
file.remove(raw_loc)
rownames(counts) <- rowData(counts)$Symbol
return(counts(counts))
}
# Get count and logcount matrices ----
raw <- GEOquery::getGEOSuppFiles("GSE137912", baseDir = tempdir(),
filter_regex = "logcounts")
raw_loc <- rownames(raw)
logcounts <- readr::read_csv(raw_loc)
genes <- logcounts$X1
logcounts <- logcounts[, -1]
logcounts <- Matrix::Matrix(as.matrix(logcounts))
file.remove(raw_loc)
conversion <- .convert(logcounts)
counts <- .get_raw_data(genes = genes)
logcounts <- logcounts[genes %in% rownames(counts), ]
counts <- .clean_counts(counts)
counts <- counts[, conversion$new]
colnames(counts) <- conversion$full
counts <- counts[rownames(counts) %in% genes, ]
# Get cell metadata ----
url <- paste0("https://static-content.springer.com/esm/art%3A10.1038%2Fs41586",
"-019-1884-x/MediaObjects/41586_2019_1884_MOESM4_ESM.csv")
celltype <- readr::read_csv(url(url))
url <- paste0("https://static-content.springer.com/esm/art%3A10.1038%2Fs41586",
"-019-1884-x/MediaObjects/41586_2019_1884_MOESM6_ESM.csv")
pst <- readr::read_csv(url(url))
colD <- full_join(celltype, pst, by = "X1")
url <- paste0("https://static-content.springer.com/esm/art%3A10.1038%2Fs41586",
"-019-1884-x/MediaObjects/41586_2019_1884_MOESM13_ESM.xlsx")
df <- openxlsx::read.xlsx(url, sheet = "Extended Data Fig. 2g, i")
df <- df[, 1:7]
colD <- full_join(colD, df)
rownames(colD) <- colD$X1
# Get gene metadata ----
url <- paste0("https://static-content.springer.com/esm/art%3A10.1038%2Fs41586",
"-019-1884-x/MediaObjects/41586_2019_1884_MOESM5_ESM.csv")
genemeta <- readr::read_csv(url(url)) %>%
dplyr::select(-X1, -X22, -Description, -`Gene-level column names`)
rownames(genemeta) <- genemeta$gene_short_name
genemeta <- genemeta %>%
filter(gene_short_name %in% rownames(counts))
conversion <- .convert(logcounts)
.convert <- function(logcounts) {
samples <- data.frame(full = colnames(logcounts)) %>%
dplyr::mutate(root = stringr::word(full, 1, sep = "_"),
int = stringr::word(full, 2, sep = "_"),
last = stringr::word(full, 3, sep = "_"))
roots <- samples %>%
dplyr::select(root, int) %>%
dplyr::distinct() %>%
dplyr::group_by(root) %>%
dplyr::mutate(new_int = rank(int))
samples_log <- dplyr::full_join(samples, roots) %>%
dplyr::mutate(new = paste(root, new_int, last, sep = "_")) %>%
dplyr::select(full, new)
return(samples_log)
}
.clean_counts <- function(counts) {
colnames(counts) <- colnames(counts) %>%
stringr::word(2, sep = "_") %>%
stringr::str_replace_all("\\.", "_") %>%
stringr::str_remove("-1$")
counts <- counts[, !stringr::str_detect(colnames(counts), "H2122_24")]
samples <- data.frame(full = colnames(counts)) %>%
dplyr::mutate(root = stringr::word(full, 1, sep = "_"),
int = as.numeric(stringr::word(full, 2, sep = "_")),
last = stringr::word(full, 3, sep = "_"))
roots <- samples %>%
dplyr::select(root, int) %>%
dplyr::distinct() %>%
dplyr::group_by(root) %>%
dplyr::mutate(new_int = rank(int))
samples_counts <- full_join(samples, roots) %>%
mutate(new = paste(root, new_int, last, sep = "_"))
counts <- counts[, samples_counts$full]
colnames(counts) <- samples_counts$new
return(counts)
}
conversion <- .convert(logcounts)
counts <- .get_raw_data(genes = genes)
logcounts <- logcounts[genes %in% rownames(counts), ]
counts <- .clean_counts(counts)
counts <- counts[, conversion$new]
colnames(counts) <- conversion$full
counts <- counts[rownames(counts) %in% genes, ]
# Get gene metadata ----
url <- paste0("https://static-content.springer.com/esm/art%3A10.1038%2Fs41586",
"-019-1884-x/MediaObjects/41586_2019_1884_MOESM5_ESM.csv")
genemeta <- readr::read_csv(url(url)) %>%
dplyr::select(-X1, -X22, -Description, -`Gene-level column names`)
rownames(genemeta) <- genemeta$gene_short_name
genemeta %>%
filter(gene_short_name %in% rownames(counts)) %>% nrow()
genemeta %>%
identity()
genemeta <- genemeta %>%
filter(gene_short_name %in% rownames(counts))
dim(counts[genemeta$gene_short_name, ])
# Format as one object ----
counts <- counts[genemeta$gene_short_name, ]
sce <- SingleCellExperiment(assays = list("counts" = counts),
rowData = genemeta, colData = DataFrame(colD))
kras <- sce
use_data(kras)
use_data(kras)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(testthat, lib.loc = "/system/linux/lib/R-20.04/4.0/x86_64/site-library")
roxygen2::roxygenize(clean = TRUE)
library(condimentsPaper)
devtools::document()
remove.packages("condimentsPaper", lib="~/R/x86_64-pc-linux-gnu-library/4.0")
devtools::document()
devtools::document()
library(condimentsPaper)
library(condimentsPaper)
1+1
devtools::document()
library(condimentsPaper)
devtools::doc
devtools::document()
load('data/tgfb.rda')
tgfb
save(tgfb, "data/tgfb.rda")
save(tgfb, file="data/tgfb.rda")
library(usethis)
data("tgfb")
data("tgfb")
use_data(tgfb, overwrite = TRUE)
save(tgfb, file="data/tgfb.rda")
devtools::document()
library(condimentsPaper)
devtools::document()
library(condimentsPaper)
library(condimentsPaper)
devtools::document()
devtools::document()
condimentsPaper::system.file
devtools::document()
.get_raw_data <- function(genes) {
raw <- GEOquery::getGEOSuppFiles("GSE137912", baseDir = tempdir(),
filter_regex = "RAW")
raw_loc <- rownames(raw)
folder <- stringr::str_remove(raw_loc, "GSE137912_RAW.tar")
system(paste0("tar -xvf ", raw_loc, " -C ", folder))
samples <- list.files(folder, full.names = TRUE) %>%
stringr::str_subset(pattern = "barcodes") %>%
stringr::str_remove("barcodes.tsv.gz")
counts_1 <- DropletUtils::read10xCounts(samples[1:4], type = "prefix",
compressed = TRUE)
keep <- rowData(counts_1)$Symbol %in% genes
counts_1 <- counts_1[keep, ]
counts_2 <- DropletUtils::read10xCounts(samples[5:12], type = "prefix",
compressed = TRUE)
keep <- rowData(counts_2)$Symbol %in% genes
counts_2 <- counts_2[keep, ]
keep <- rownames(counts_1) %in% rownames(counts_2)
counts_1 <- counts_1[keep, ]
keep <- rownames(counts_2) %in% rownames(counts_1)
counts_2 <- counts_2[keep, ]
counts_2 <- counts_2[rownames(counts_1), ]
colnames(counts_1) <- paste0(counts_1$Sample, counts_1$Barcode)
colnames(counts_2) <- paste0(counts_2$Sample, counts_2$Barcode)
counts <- cbind(counts_1, counts_2)
file.remove(raw_loc)
rownames(counts) <- rowData(counts)$Symbol
return(counts(counts))
}
.convert <- function(logcounts) {
samples <- data.frame(full = colnames(logcounts)) %>%
dplyr::mutate(root = stringr::word(full, 1, sep = "_"),
int = stringr::word(full, 2, sep = "_"),
last = stringr::word(full, 3, sep = "_"))
roots <- samples %>%
dplyr::select(root, int) %>%
dplyr::distinct() %>%
dplyr::group_by(root) %>%
dplyr::mutate(new_int = rank(int))
samples_log <- dplyr::full_join(samples, roots) %>%
dplyr::mutate(new = paste(root, new_int, last, sep = "_")) %>%
dplyr::select(full, new)
return(samples_log)
}
.clean_counts <- function(counts) {
colnames(counts) <- colnames(counts) %>%
stringr::word(2, sep = "_") %>%
stringr::str_replace_all("\\.", "_") %>%
stringr::str_remove("-1$")
counts <- counts[, !stringr::str_detect(colnames(counts), "H2122_24")]
samples <- data.frame(full = colnames(counts)) %>%
dplyr::mutate(root = stringr::word(full, 1, sep = "_"),
int = as.numeric(stringr::word(full, 2, sep = "_")),
last = stringr::word(full, 3, sep = "_"))
roots <- samples %>%
dplyr::select(root, int) %>%
dplyr::distinct() %>%
dplyr::group_by(root) %>%
dplyr::mutate(new_int = rank(int))
samples_counts <- full_join(samples, roots) %>%
mutate(new = paste(root, new_int, last, sep = "_"))
counts <- counts[, samples_counts$full]
colnames(counts) <- samples_counts$new
return(counts)
}
#' @title Download and preprocess the raw dataset from Xue et al.
#' @description Download the dataset from GEO, filter, and create a
#' \code{SingleCellExperiment object}
#' @references
#' Jenny Y. Xue, Yulei Zhao, Jordan Aronowitz, Trang T. Mai, Alberto Vides,
#' Besnik Qeriqi, Dongsung Kim, Chuanchuan Li, Elisa de Stanchina, Linas Mazutis,
#'  Davide Risso, and Piro Lito.
#' *Rapid non-uniform adaptation to conformation-specific KRAS(G12C) inhibition.*
#' Nature, 577(7790):421–425,jan  2020. ISSN  14764687. doi: 10.1038/s41586-019-1884-x
#' @export
#' @import stringr dplyr readr DropletUtils SingleCellExperiment GEOquery
#' @importFrom openxlsx read.xlsx
#' @details
#' If the Timeout fails, you can change the options with
#' # tmt <- getOption('timeout')
#  # options(timeout = 60 * 10)
import_KRAS <- function() {
# Get count and logcount matrices ----
raw <- GEOquery::getGEOSuppFiles("GSE137912", baseDir = tempdir(),
filter_regex = "logcounts")
raw_loc <- rownames(raw)
logcounts <- readr::read_csv(raw_loc)
genes <- logcounts$X1
logcounts <- logcounts[, -1]
logcounts <- Matrix::Matrix(as.matrix(logcounts))
file.remove(raw_loc)
conversion <- .convert(logcounts)
counts <- .get_raw_data(genes = genes)
logcounts <- logcounts[genes %in% rownames(counts), ]
counts <- .clean_counts(counts)
counts <- counts[, conversion$new]
colnames(counts) <- conversion$full
counts <- counts[rownames(counts) %in% genes, ]
# Get cell metadata ----
url <- paste0("https://static-content.springer.com/esm/art%3A10.1038%2Fs41586",
"-019-1884-x/MediaObjects/41586_2019_1884_MOESM4_ESM.csv")
celltype <- readr::read_csv(url(url))
url <- paste0("https://static-content.springer.com/esm/art%3A10.1038%2Fs41586",
"-019-1884-x/MediaObjects/41586_2019_1884_MOESM6_ESM.csv")
pst <- readr::read_csv(url(url))
colD <- full_join(celltype, pst, by = "X1")
url <- paste0("https://static-content.springer.com/esm/art%3A10.1038%2Fs41586",
"-019-1884-x/MediaObjects/41586_2019_1884_MOESM13_ESM.xlsx")
df <- openxlsx::read.xlsx(url, sheet = "Extended Data Fig. 2g, i")
df <- df[, 1:7]
colD <- full_join(colD, df)
rownames(colD) <- colD$X1
# Get gene metadata ----
url <- paste0("https://static-content.springer.com/esm/art%3A10.1038%2Fs41586",
"-019-1884-x/MediaObjects/41586_2019_1884_MOESM5_ESM.csv")
genemeta <- readr::read_csv(url(url)) %>%
dplyr::select(-X1, -X22, -Description, -`Gene-level column names`)
rownames(genemeta) <- genemeta$gene_short_name
genemeta <- genemeta %>%
filter(gene_short_name %in% rownames(counts))
# Format as one object ----
counts <- counts[genemeta$gene_short_name, ]
sce <- SingleCellExperiment(assays = list("counts" = counts),
rowData = genemeta, colData = DataFrame(colD))
return(sce)
}
library(condimentsPaper)
devtools::document()
library(condimentsPaper)
devtools::document()
library(condimentsPaper)
devtools::document()
devtools::document()
1_1
1_+1
1+1
library(condimentsPaper)
devtools::document()
library(knitr)
opts_chunk$set(
fig.pos = "!h", out.extra = "", warning = F,
fig.align = "center"
)
libs <- c("dplyr", "stringr", "Seurat", "SingleCellExperiment", "slingshot",
"condiments", "cowplot")
suppressMessages(
suppressWarnings(sapply(libs, require, character.only = TRUE))
)
rm(libs)
theme_set(theme_classic())
data("tcdd", package = "condimentsPaper")
df <- bind_cols(
as.data.frame(reducedDims(tcdd)$UMAP),
as.data.frame(colData(tcdd)))
p1 <- ggplot(df, aes(x = UMAP_1, y = UMAP_2, col = treatment)) +
geom_point(size = .7) +
scale_color_brewer(palette = "Accent") +
labs(col = "Treatment")
libs <- c("dplyr", "stringr", "Seurat", "SingleCellExperiment", "slingshot",
"condiments", "ggplot2", "cowplot")
suppressMessages(
suppressWarnings(sapply(libs, require, character.only = TRUE))
)
rm(libs)
theme_set(theme_classic())
pal <- c("#729ECE", "#FF9E4A", "#67BF5C", "#ED665D", "#AD8BC9",
"#A8786E", "#ED97CA", "#A2A2A2", "#CDCC5D", "#6DCCDA")
df <- bind_cols(
as.data.frame(reducedDims(tcdd)$UMAP),
as.data.frame(colData(tcdd)))
p1 <- ggplot(df, aes(x = UMAP_1, y = UMAP_2, col = treatment)) +
geom_point(size = .7) +
scale_color_brewer(palette = "Accent") +
labs(col = "Treatment")
p2 <- ggplot(df, aes(x = UMAP_1, y = UMAP_2, fill = celltype)) +
geom_point(size = 1, alpha = .65, col = "grey70", shape = 21) +
scale_fill_manual(values = pal) +
labs(fill = "Cell Type")
p1
p2
tcdd <- imbalance_score(tcdd, dimred = "UMAP", conditions = "treatment", smooth = 5)
df$scores <- tcdd$scores$scaled_scores
p3 <- ggplot(df, aes(x = UMAP_1, y = UMAP_2, col = scores)) +
geom_point(size = .7) +
scale_color_viridis_c(option = "C") +
labs(col = "Score")
p3
sds <- slingshot(reducedDim(tcdd, "UMAP"),
clusterLabels = tcdd$celltype,
start.clus = "Central",
end.clus  = "Portal")
rownames(df) <- colnames(tcdd)
pst <- data.frame(cells = rownames(sds@reducedDim),
pst = slingPseudotime(sds)[, 1])
df$cells <- rownames(df)
df <- dplyr::full_join(df, pst)
p4 <- ggplot(df, aes(x = UMAP_1, y = UMAP_2, col = pst)) +
geom_point(size = .7) +
scale_color_viridis_c() +
labs(col = "Pseudotime") +
geom_path(data = sds@curves$curve1$s[sds@curves$curve1$ord, ] %>%
as.data.frame() %>%
dplyr::mutate(X = UMAP_1, Y = UMAP_2),
col = "black", size = 1.5)
p4
p5 <- ggplot(df, aes(x = pst)) +
geom_density(alpha = .8, aes(fill = treatment), col = "transparent") +
geom_density(aes(col = treatment), fill = "transparent", size = 1.5) +
guides(col = FALSE,
fill = guide_legend(
override.aes = list(size = 1.5,
col = c("#7FC97F", "#BEAED4"),
title.position = "top")
)) +
scale_fill_brewer(palette = "Accent") +
scale_color_brewer(palette = "Accent") +
labs(x = "Pseudotime", fill = "Treatment")
p5
libs <- c("dplyr", "stringr", "Seurat", "SingleCellExperiment", "slingshot",
"condiments", "ggplot2", "cowplot", "tradeSeq")
suppressMessages(
suppressWarnings(sapply(libs, require, character.only = TRUE))
)
rm(libs)
theme_set(theme_classic())
pal <- c("#729ECE", "#FF9E4A", "#67BF5C", "#ED665D", "#AD8BC9",
"#A8786E", "#ED97CA", "#A2A2A2", "#CDCC5D", "#6DCCDA")
filter <- apply(counts(tcdd), 1, function(g) {
sum(g >= 3) >= 10
})
tcdd <- tcdd[filter, ]
tcdd
tcdd <- readRDS("~/DifferentialTopology/Cache/Liver_tradeSeq.rds")
tcdd
data("tcdd", package = "condimentsPaper")
tcdd <- imbalance_score(tcdd, dimred = "UMAP", conditions = "treatment", smooth = 5)
filter <- apply(counts(tcdd), 1, function(g) {
sum(g >= 3) >= 10
})
tcdd <- tcdd[filter, ]
library(BiocParallel)
